/*
 * This file is generated by jOOQ.
 */
package com.transfer.jooq.stubs.tables.records;


import com.transfer.jooq.stubs.tables.Account;

import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record6<String, String, String, BigDecimal, String, String> {

    private static final long serialVersionUID = -964347880;

    /**
     * Setter for <code>PUBLIC.ACCOUNT.ACCOUNT_NUMBER</code>.
     */
    public void setAccountNumber(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.ACCOUNT_NUMBER</code>.
     */
    public String getAccountNumber() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.TYPE</code>.
     */
    public void setType(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.TYPE</code>.
     */
    public String getType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.DESCRIPTION</code>.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.DESCRIPTION</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.BALANCE</code>.
     */
    public void setBalance(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.BALANCE</code>.
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.CURRENCY_CODE</code>.
     */
    public void setCurrencyCode(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.CURRENCY_CODE</code>.
     */
    public String getCurrencyCode() {
        return (String) get(4);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.SOFT_DELETED</code>.
     */
    public void setSoftDeleted(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.SOFT_DELETED</code>.
     */
    public String getSoftDeleted() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, String, String, BigDecimal, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<String, String, String, BigDecimal, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Account.ACCOUNT.ACCOUNT_NUMBER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Account.ACCOUNT.DESCRIPTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigDecimal> field4() {
        return Account.ACCOUNT.BALANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return Account.ACCOUNT.CURRENCY_CODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Account.ACCOUNT.SOFT_DELETED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getAccountNumber();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal component4() {
        return getBalance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return getCurrencyCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getSoftDeleted();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getAccountNumber();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getDescription();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal value4() {
        return getBalance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return getCurrencyCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getSoftDeleted();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value1(String value) {
        setAccountNumber(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value2(String value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value3(String value) {
        setDescription(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value4(BigDecimal value) {
        setBalance(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value5(String value) {
        setCurrencyCode(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value6(String value) {
        setSoftDeleted(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord values(String value1, String value2, String value3, BigDecimal value4, String value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(String accountNumber, String type, String description, BigDecimal balance, String currencyCode, String softDeleted) {
        super(Account.ACCOUNT);

        set(0, accountNumber);
        set(1, type);
        set(2, description);
        set(3, balance);
        set(4, currencyCode);
        set(5, softDeleted);
    }
}
